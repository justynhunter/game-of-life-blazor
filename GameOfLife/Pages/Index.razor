@page "/"
@using GameOfLife.Models
@inject IJSRuntime JsRuntime
@inject NavigationManager NavManager

@if (null != this.World)
{
    <div id="game-container">
        <div id="heder">
            <h1>Game of Life</h1>
        </div>

        <div id="game">
            @for (var y = 0; y != this.World.CurrentState.GetLength(1); ++y)
            {
                <div class="row">
                    @for (var x = 0; x != this.World.CurrentState.GetLength(0); ++x)
                    {
                        var x1 = x; var y1 = y;

                        <div class="cell @(this.World.CurrentState[x, y] ? "alive" : "")">
                            &nbsp;
                        </div>
                    }
                </div>
            }
        </div>
        <div id="footer">
            <p>
                <button @onclick="TogglePause">@(this.World.Paused ? "Play" : "Pause")</button>
            </p>
            <div>
                <label for="width">Width:</label>
                <input id="width" type="text" @bind="Width" />
            </div>

            <div>
                <label for="height">Height:</label>
                <input id="height" type="text" @bind="Height" />
            </div>
            <div>
                <label for="seed">Seed:</label>
                <input id="seed" type="text" @bind="Seed" />
            </div>
            <button @onclick="StartNew">Start Over</button>
        </div>
    </div>
}

@code
{
    [Inject]
    public Game? World { get; set; }

    [Parameter, SupplyParameterFromQuery(Name = "seed")]
    public int? Seed { get; set; }

    [Parameter, SupplyParameterFromQuery(Name = "w")]
    public int? Width { get; set; }

    [Parameter, SupplyParameterFromQuery(Name = "h")]
    public int? Height { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (!Width.HasValue) {
            Width = 25;
        }

        if (!Height.HasValue) {
            Height = 25;
        }

        if (!Seed.HasValue) {
            Seed = Environment.TickCount;
        }
        NavManager.NavigateTo($"/?w={Width}&h={Height}&seed={Seed}");

        World = Game.CreateGame(Width.Value, Height.Value, Seed.Value);
        World.OnChangeAsync += Refresh;
        World.Run();
        await Refresh();
    }

    private void TogglePause(MouseEventArgs e)
    {
        if (this.World != null)
        {
            this.World.TogglePaused();
        }
    }

    private void StartNew(MouseEventArgs e)
    {
        if (!Width.HasValue)
        {
            Width = 25;
        }

        if (!Height.HasValue)
        {
            Height = 25;
        }

        if (!Seed.HasValue) {
            Seed = Environment.TickCount;
        }

        NavManager.NavigateTo($"/?w={Width}&h={Height}&seed={Seed}");
        World = Game.CreateGame(Width.Value, Height.Value, Seed.Value);
        World.Run();
    }

    private async Task Refresh()
    {
        await InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        if (this.World != null)
        {
            World.OnChangeAsync -= Refresh;
        }
    }

    public class WindowDimension
    {
        public int Width { get; set; }
        public int Height { get; set; }
    }
}